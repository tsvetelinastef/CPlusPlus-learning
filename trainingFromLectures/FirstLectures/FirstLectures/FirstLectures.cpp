#include <iostream>
using namespace std; 
// Обекти и класове. Дефиниция на клас. 
//Общи понятия и концепции

// Клас – това е една от основните части на 
//обектно-ориентираното програмиране (ООП). Може да 
// се дефинира като тип данни, който служи като модел, 
//по който могат да се правят обекти.Един клас може
//да съдържа в себе си променливи(или 
//„член - променливи“, “атрибути“) и функции
// (също наречени „член - функции“ или „методи“).
// На същите могат да се правят различни инстанции
//от много обекти.

class ClassName
{
	Access specifier: //can be private, public, protected
	Data members;  // Variables to be used
	Member Functions() {}  //Methods to access data members
	// Class name ends with a semicolon
};

//Обект - обектът представлява инстанция на някакъв клас.
// При създаване на клас не се запазва определено
//количество памет за него.Това става след като се 
// създаде обект от клас(тоест, след като се инстанцира).

ClassName ObjectName;

// за да се знае чий клас е даден обект, трябва първо да
// посочим класа и непосредствено след него да 
// уточним името на обекта от този клас

class Cat {
public:
	string name;
	string breed;
	int age;
	string color;

	void makeSound()
	{
		cout << " Meow! " << endl;
	}

	void eat()
	{
		cout << name << " is eating! " << endl;
	}
};

// В горния пример сме дефинирали класа “Cat”. 
//Той съдържа атрибутите “name, breed, age, color” и 
//методите makeSound() и eat().Можем да инициализираме
//много различни обекти от този тип “Cat” с различни 
//имена, на различна възраст, но същевременно всички 
//ще имат нещо общо.В нашия случай всички котки ще
//издават един и същ звук.Когато се викне на тях
//метода “makeSound()”, независимо колко са различни,
//всички ще кажат едно и също нещо. За да достъпим до
//информацията и член - функциите в един клас, трябва 
//първо да създадем обект от този клас.
// Ако използваме нашия примерен клас, обект ще изглежда
//по следния начин:

Cat kitty;
//обект от тип “Cat”, който ще се казва “kitty”

// Достъпът до public компонентите на даден обект се 
//осъществява по два начина - чрез името на обекта и
//името на компонента, разделени с точка или чрез
//указател към обекта, и името на компонента

// чрез точка
int main() {
	Cat cat;
	cat.age = 10;
	cat.name = "Zoe";
	cat.breed = "Ragdoll";
	cat.color = "gray";

	cat.makeSound();

	return 0;
}
// чрез стрелка

int main() {
	Cat cat;
	Cat* catPointer = &cat;

	catPointer->name = "Zoe";
}



